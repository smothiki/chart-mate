#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below.

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
#
#/ command: chart-mate:install: "install deis with helm classic"
#/ usage: rerun chart-mate:install [options]

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh install || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -eo pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables:

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting
# one the corresponding option variables.

rerun_options_parse "$@"

log-info "Load the chart-mate configuration"
load-config

kubectl get events --all-namespaces -w > ${K8S_EVENT_LOG} 2>&1 &

helmc doctor

log-info "Removing helm repo ${HELM_REMOTE_NAME} if exists..."
helmc repo remove "${HELM_REMOTE_NAME}" || true

log-info "Adding helm repo ${HELM_REMOTE_REPO} as ${HELM_REMOTE_NAME}..."
helmc repo add "${HELM_REMOTE_NAME}" "${HELM_REMOTE_REPO}" || true

if [ "${HELM_REMOTE_BRANCH}" != "master" ]; then
  log-info "Checking out ${HELM_REMOTE_BRANCH} branch..."
  cd "${HELMC_HOME}/cache/${HELM_REMOTE_NAME}"
  git checkout "${HELM_REMOTE_BRANCH}"
fi

log-info "Update the charts!"
helmc up

log-info "Fetching ${HELM_REMOTE_NAME}/${WORKFLOW_CHART}"
helmc fetch "${HELM_REMOTE_NAME}/${WORKFLOW_CHART}"

log-info "modify generate_params.toml ${HELM_REMOTE_NAME}/${WORKFLOW_CHART}/tpl/generate_param.toml"
generator "params.toml" "${HELM_REMOTE_NAME}/${WORKFLOW_CHART}/tpl/generate_param.toml"

log-info "Generate manifests from templates"
helmc generate -f -x manifests "${WORKFLOW_CHART}"

log-info "Installing chart ${WORKFLOW_CHART}"
helmc install "${WORKFLOW_CHART}"

log-info "Running kubectl describe pods and piping the output to ${DEIS_DESCRIBE}"
kubectl describe ns,svc,pods,rc,daemonsets --namespace=deis > "${DEIS_DESCRIBE}"
print-out-running-images || true
