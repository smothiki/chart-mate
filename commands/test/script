#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below.

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
#
#/ command: chart-mate:test: "run e2e tests for deis"
#/ usage: rerun chart-mate:test [options]

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh test || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -eo pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables:

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting
# one the corresponding option variables.

rerun_options_parse "$@"

load-config

trap "retrieve-deis-info" EXIT

WORKFLOW_E2E_CONTAINER="tests"
mkdir -p "${HELMC_HOME}/cache/${HELM_REMOTE_NAME}/${WORKFLOW_E2E_CHART}"
helmc fetch "${HELM_REMOTE_NAME}/${WORKFLOW_E2E_CHART}"
helmc generate -f "${WORKFLOW_E2E_CHART}"
helmc uninstall -n deis -y "${WORKFLOW_E2E_CHART}"
helmc install "${WORKFLOW_E2E_CHART}"

wait-for-pod "${WORKFLOW_E2E_CHART}"

# keep trying to access logs until the pod actually exits
# as there's a timeout on kubectl logs -f that we
# sometimes run into
iterations=0
while ! return-pod-exit-code "${WORKFLOW_E2E_CHART}" "${WORKFLOW_E2E_CONTAINER}" &> /dev/null; do
  log-info "Reloading kubectl logs (#${iterations})"

  kubectl --namespace=deis logs -c "${WORKFLOW_E2E_CONTAINER}" -f "${WORKFLOW_E2E_CHART}" || true

  let iterations+=1
done

echo "---------------------------------------------"
return-pod-exit-code "${WORKFLOW_E2E_CHART}" "${WORKFLOW_E2E_CONTAINER}"

log-info "retrieving junit.xml from the artifacts sidecar container"
kubectl --namespace=deis exec -c artifacts "${WORKFLOW_E2E_CHART}" -- /bin/sh -c "find /root -name junit*.xml" > "${DEIS_LOG_DIR}/all-junit-files.out"
while read -r file || [[ -n "${file}" ]]
do
  kubectl --namespace=deis exec -c artifacts "${WORKFLOW_E2E_CHART}" cat "${file}" > "${DEIS_LOG_DIR}/$(basename "$file")"
done < "${DEIS_LOG_DIR}/all-junit-files.out"

exit $(return-pod-exit-code "${WORKFLOW_E2E_CHART}" "${WORKFLOW_E2E_CONTAINER}" 2>/dev/null)
